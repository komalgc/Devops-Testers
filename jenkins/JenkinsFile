pipeline {
    agent none

    stages {
        stage('Parallel Unit Tests') {
            parallel {
                stage('Unit Tests - Backend') {
                    agent {
                        docker {
                            image 'golang:1.21-alpine'
                            reuseNode true
                        }
                    }
                    environment {
                        GOCACHE = "${env.WORKSPACE}/.cache"
                    }
                    steps {
                        script {
                            dir('bugtracker-backend') {
                                sh '''
                                    mkdir -p $GOCACHE
                                    go install github.com/jstemmer/go-junit-report@latest
                                    go test -v ./... 2>&1 | ~/go/bin/go-junit-report > test-results.xml

                                    # Generate code coverage report
                                    go test -coverprofile=coverage.out -covermode=atomic ./...
                                    go tool cover -html=coverage.out -o coverage.html

                                    mkdir -p reports
                                    mv coverage.html reports/
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/test-results.xml'
                            publishHTML(target: [
                                reportName: 'Code Coverage Report',
                                reportDir: 'bugtracker-backend/reports',
                                reportFiles: 'coverage.html',
                                alwaysLinkToLastBuild: true
                            ])
                        }
                    }
                }

                stage('Unit Tests - Frontend') {
                    agent {
                        docker {
                            image 'node:20-alpine'
                            reuseNode true
                        }
                    }
                    steps {
                        script {
                            dir('bugtracker-frontend') {
                                sh '''
                                    npm ci
                                    npm test

                                    mkdir -p reports
                                    mv coverage reports/
                                '''
                            }
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-frontend/test-results.xml'
                            publishHTML(target: [
                                reportName: 'Code Coverage Frontend Report',
                                reportDir: 'bugtracker-frontend/reports',
                                reportFiles: 'index.html',
                                alwaysLinkToLastBuild: true
                            ])
                        }
                    }
                }
            }

                stage('Launch the application'){
                    agent {
                        docker {
                            image 'docker:27.5.1'
                            reuseNode true
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    steps{
                        sh 'docker compose up --build -d'
                    }

                }

                stage('API tests'{
                    agent {
                        docker {
                            image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                            reuseNode true
                            args '-u 0 --network=host'
                        }
                    }

                    steps{
                        dir('tests-api'){
                            sh 'npx wait-port http://localhost:8080/api/health -t 30000'
                            sh 'npm ci'
                            sh 'npx playwright test --reporter=html'
                        }
                    }
                })
        }
    

    post {
        always {
            cleanWs()
        }
    }
    }
}
